import express from 'express';
import { controllers } from '../utils/config/di';
import { handleRequest } from '../utils/middleware/request';
import validateSchema from '../utils/middleware/validate';
import { checkAdminPermission } from '../utils/middleware/auth';
import {{name}}Validation from '../validation/{{nameSnakeCase}}';
import CommonValidation from '../validation/common';

const router = express.Router();

//#region create{{name}}
/**
 * @openapi
 * /{{nameKebabCasePlural}}/new:
 *  post:
 *    summary: Create a new {{name}}
 *    description: Create a new {{name}}
 *    tags: [{{name}}]
 *    security:
 *      - bearerAuth: []
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *            {{#each fields}}
 *              {{fieldName}}:
 *                type: {{fieldType}}
 *                {{#if maxLength}}maxLength: {{maxLength}}{{/if}}
 *                {{#unless isNullable}}required: true{{/unless}}
 *            {{/each}}
 *    responses:
 *      201:
 *        description: Created successfully
 *        content:
 *          application/json:
 *            schema:
 *               $ref: '#/components/responses/Create{{name}}Success'
 */
router.post(
  '/create',
  validateSchema({{name}}Validation.createAndUpdate),
  handleRequest(controllers.{{nameVariable}}.create)
);
//#endregion create{{name}}

//#region getList{{namePlural}}
/**
 * @openapi
 * /{{nameKebabCasePlural}}:
 *  get:
 *    summary: Get a list of {{namePlural}}
 *    description: Retrieve a paginated list of {{namePlural}}
 *    tags: [{{name}}]
 *    security:
 *      - bearerAuth: []
 *    parameters:
 *      - in: query
 *        name: page
 *        schema:
 *          type: integer
 *      - in: query
 *        name: limit
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Retrieved list successfully
 *        content:
 *          application/json:
 *            schema:
 *               $ref: '#/components/responses/Get{{namePlural}}Success'
 */
router.get(
  '/',
  validateSchema(CommonValidation.pagination),
  handleRequest(controllers.{{nameVariable}}.index)
);
//#endregion getList{{namePlural}}

//#region get{{name}}ById
/**
 * @openapi
 * /{{nameKebabCasePlural}}/{id}:
 *  get:
 *    summary: Get {{name}} by ID
 *    description: Retrieve a single {{name}} by its unique identifier
 *    tags: [{{name}}]
 *    security:
 *      - bearerAuth: []
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: integer
 *    responses:
 *      200:
 *        description: Retrieved successfully
 *        content:
 *          application/json:
 *            schema:
 *               $ref: '#/components/responses/Get{{name}}ByIdSuccess'
 */
router.get('/:id', handleRequest(controllers.{{nameVariable}}.show));
//#endregion get{{name}}ById

//#region update{{name}}ById
/**
 * @openapi
 * /{{nameKebabCasePlural}}/{id}:
 *  put:
 *    summary: Update {{name}} by ID
 *    description: Update a {{name}}'s details by ID
 *    tags: [{{name}}]
 *    security:
 *      - bearerAuth: []
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *            {{#each fields}}
 *              {{fieldName}}:
 *                type: {{fieldType}}
 *                {{#if maxLength}}maxLength: {{maxLength}}{{/if}}
 *                {{#unless isNullable}}required: true{{/unless}}
 *            {{/each}}
 *    responses:
 *      200:
 *        description: Updated successfully
 *        content:
 *          application/json:
 *            schema:
 *               $ref: '#/components/responses/Update{{name}}ByIdSuccess'
 */
router.put('/:id',
  validateSchema({{name}}Validation.createAndUpdate),
  handleRequest(controllers.{{nameVariable}}.update)
);
//#endregion update{{name}}ById

//#region delete{{name}}ById
/**
 * @openapi
 * /{{nameKebabCasePlural}}/{id}:
 *  delete:
 *    summary: Delete {{name}} by ID
 *    description: Delete a {{name}} by its unique identifier
 *    tags: [{{name}}]
 *    security:
 *      - bearerAuth: []
 *    responses:
 *      200:
 *        description: Deleted successfully
 *        content:
 *          application/json:
 *            schema:
 *               $ref: '#/components/responses/Delete{{name}}ByIdSuccess'
 */
router.delete('/:id',
  checkAdminPermission,
  handleRequest(controllers.{{nameVariable}}.delete)
);
//#endregion delete{{name}}By

export default router;